function [acc,classAcc,confusionMatrix,TP,FP,FN,precision,recall] = EvalThirdLayerJournalEtrims(fold,nImages,overlap,dataweight,gridweight)

    correctPixels = 0;
    totalPixels = 0;
    confusionMatrix = zeros(8,8);
    
    thingsLabels = [8];
    totalTP = zeros(1,length(thingsLabels));
    totalFP = zeros(1,length(thingsLabels));
    totalFN = zeros(1,length(thingsLabels));

    
    dataLocation = '/users/visics/mmathias/devel/3layerJournal/etrims/';
    
    rectLocation = '/usr/data/amartino/gould/testEtrimsJournal/';

    gtLocation = '/usr/data/amartino/Facades/etrims-db_v1/annotations/08_etrims-ds/';
    
    imageLocation = '/usr/data/amartino/Facades/etrims-db_v1/images/08_etrims-ds/';

    imageNames = ReadFoldImageNames('eTrims',fold,'eval');
    
    stems= strcat(gtLocation,imageNames);
    groundTruthFilenames = strcat(stems,'.txt');
    
    
    rectStems = strcat(rectLocation,imageNames);
    rectFilenames = strcat(rectStems,'rect.dat');
    
    origImgStems = strcat(imageLocation,imageNames);
    origImgFilenames = strcat(origImgStems,'.jpg');
    
    for imageNr=1:nImages
        fprintf('.');
        outputMat = [dataLocation 'etrims_sampling_30_set_eval_fold_' num2str(fold) '_image_' num2str(imageNr) ...
            '_dataweight_' num2str(70) '_gridweight_' num2str(5) '.mat' ];
        
        if exist(outputMat,'file')
            load(outputMat);
            labels = output;
        else
            warning('No file generated by markus');
            load(['markus_journal/markus_eTrims_eval_fold_' num2str(fold) '_img_' num2str(imageNr) '.mat']);
            labels = outImg;
        end
        
        % HACK: Dilate windows
        oldLabels = labels;
        mask = (labels == 8);
%         mask = imdilate(mask,[1 1 1; 1 0 1; 1 1 1]);
%         mask = imdilate(mask,[1 1 1; 1 0 1; 1 1 1]);
        labels(mask) = 8;
        labels(oldLabels==7) = 7;
        
        % % % % windows = segMap(:,:,1);
% % % % label = max(max(windows));
% % % % mask = windows>0;
% % % % for i=1:1
% % % %     mask(:,:,1) =  imdilate(mask(:,:,1), [1 1 1; 1 0 1; 1 1 1]);
% % % % end

        
        groundTruth = dlmread(groundTruthFilenames{imageNr});
        
        
        homographyFilename = rectFilenames{imageNr};
        homography = load(homographyFilename);
        labels = rewarp(groundTruth,labels,homography);
        
        [corImg, totImg, cmImg]= EvaluateLabeling('eTrims',labels,groundTruth,8,[0]);
        
        correctPixels = correctPixels + corImg;
        totalPixels = totalPixels + totImg;
        confusionMatrix = confusionMatrix + cmImg;
        
        for i=1:length(thingsLabels)
            class = thingsLabels(i);
            [tp,fp,fn]= EvaluateLabelingPascalVOC(labels,groundTruth,class,overlap);
            totalTP(i) = totalTP(i) + tp;
            totalFP(i) = totalFP(i) + fp;
            totalFN(i) = totalFN(i) + fn;
        end
        
        origImg = imread(origImgFilenames{imageNr});
   
        writeSegmentationToDisk(labels,['visual_journal/eTrims_' num2str(fold) '_' num2str(imageNr) '_layer3.png'],origImg,0.5,2,2);
        writeSegmentationToDisk(labels,['visual_journal/eTrims_' num2str(fold) '_' num2str(imageNr) '_orig.png'],origImg,0,2,2);


    end
    
    for i=1:8
        confusionMatrix(i,:) = confusionMatrix(i,:)/sum(confusionMatrix(i,:));
    end
    %Accuracy
    acc = correctPixels/totalPixels;
    
    confusionMatrix = (100*confusionMatrix);
    confusionMatrix(isnan(confusionMatrix))=0;
    
    % HACK
    d = diag(confusionMatrix);
    classAcc = mean(d);
    
    TP = totalTP;
    FP = totalFP;
    FN = totalFN;
    
    precision = TP./(TP+FP);
    recall = TP./(TP+FN);
%     disp(acc);
%     disp(confusionMatrix);
%     disp([TP FP FN]);
end